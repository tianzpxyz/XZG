{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"VPN/","title":"WireGuard VPN","text":""},{"location":"VPN/#server-setup","title":"Server setup","text":"<p>To use the VPN feature you need a running Wireguard server to connect to.</p> <p>The installation instructions are best covered on the official Wireguard website: https://www.wireguard.com/install/.</p> <p>Next steps are covered in their quickstart guide: https://www.wireguard.com/quickstart/.</p> <p>Terminology</p> <p>While Wireguard uses peers in their terminology, we will refer to the UZG device as peer and to the Wireguard server as server.</p>"},{"location":"VPN/#keys","title":"Keys","text":""},{"location":"VPN/#privatepublic-key-pair","title":"Private/Public key-pair","text":"<p>Peer authentication is achieved using a private/public key-pair. To generate the keys you can use the built-in wg command:</p> <p><pre><code>$ mkdir wg-keys\n$ cd wg-keys\n$ umask 077\n$ wg genkey | tee privatekey | wg pubkey &gt; publickey\n</code></pre> This will create two files with private and public key respectively. You can use those later in the configuration process.</p> <p>Each peer (and server) should have a unique key-pair. Private keys should only ever be known to the \"owner\" of the key-pair, wheras public key can be shared with other peers or servers.</p>"},{"location":"VPN/#pre-shared-key","title":"Pre-shared key","text":"<p>Optionally, you can add another layer of cryptographic protection to your VPN with the PreSharedKey. It adds a layer of symmetric-key cryptography to the traffic between specific peers.</p> <p>You can generate the key using the wg command:</p> <p><code>$ wg genpsk &gt; psk</code></p>"},{"location":"VPN/#config-generator","title":"Config generator","text":"<p>There is also a handy config generator website: https://www.wireguardconfig.com/.  Make sure to note the Random seed so you can replicate the configuration and keys if needed.</p>"},{"location":"VPN/#wireguard-peer-configuration","title":"Wireguard peer configuration","text":""},{"location":"VPN/#wireguard-interface-settings","title":"WireGuard Interface Settings","text":"<ul> <li> <p>IP address of the local interface</p> <p>This is the local peer IP address of the WireGuard interface. It should match <code>AllowedIPs</code> section in server config.</p> </li> <li> <p>Local Subnet</p> <p>The subnet for the local peer IP address. If unsure, a safe bet would be <code>255.255.255.0</code>.</p> </li> <li> <p>Local port</p> <p>Port number of the local interface, normally <code>33333</code>.</p> </li> <li> <p>Local Gateway</p> <p>A gateway to use on the VPN interface. It can be either the Wireguard server IP (see Example) or <code>0.0.0.0</code>.</p> </li> <li> <p>Private key of the local interface</p> <p>The private key of the local peer. (see Private/Public key-pair)</p> </li> <li> <p>Address of the endpoint peer</p> <p>Address of the WG server</p> </li> <li> <p>Public key of the endpoint peer</p> <p>The public key of the WG server. (see Private/Public key-pair)</p> </li> <li> <p>Port of the endpoint peer</p> <p>Port of the WG server, normally <code>51820</code></p> </li> <li> <p>Allowed IPs</p> <p>A comma separated list of the IPs allowed to connect to this device via WG</p> </li> <li> <p>Allowed Subnet</p> <p>A comma separated list of the subnets allowed to connect to this device via WG</p> </li> <li> <p>Make default</p> <p>Use this as the default Wireguard configuration.</p> </li> <li> <p>Pre-shared key</p> <p>Optional key to encrypt traffic between peers (see Pre-shared key). Leave blank if unused. </p> </li> </ul>"},{"location":"VPN/#example","title":"Example","text":"<p>Demo data</p> <p>Please generate new keys and use appropriate IP ranges for use in real life scenarios! (see Private/Public key-pair)</p> Server Peer Public IP 1.2.3.4 *.*.*.* Wireguard IP 10.100.0.1 10.100.0.2 Private key Server+PrivateKey= Peer+PrivateKey= Public key Server+PublicKey= Peer+PublicKey= Port 51820 33333"},{"location":"VPN/#server-config","title":"Server config","text":"<p>An example entry of the /etc/wg0.conf:</p> <pre><code>[Interface]\nAddress = 10.100.0.1/24\nListenPort = 51820\nPrivateKey = Server+PrivateKey=\n\n[Peer]\nPublicKey = Peer+PublicKey=\nAllowedIPs = 10.100.0.2/32\n</code></pre>"},{"location":"VPN/#peer-config","title":"Peer config","text":"IP address of the local interface: 10.100.0.2 Local Subnet: 255.255.255.0 Local port: 33333 Local Gateway: 10.100.0.1 Private key of the local interface: Peer+PrivateKey= Address of the endpoint peer: 1.2.3.4 Public key of the endpoint peer: Server+PublicKey= Port of the endpoint peer: 51820 Allowed IPs: 0.0.0.0 Allowed Subnet: 0.0.0.0"},{"location":"about/","title":"About","text":"<p>XZG Firmware unifies the best innovations from previous Zigbee gateway projects into a single, comprehensive solution.</p> <p>By focusing the community's efforts on enhancing one product, XZG aims to streamline development, thereby improving the capabilities and efficiency of your Zigbee Gateways. \ud83c\udf0d</p>"},{"location":"about/#community","title":"Community","text":"<p>Your insights, feedback, and collaboration are invaluable to us \ud83e\udd1d</p> <ul> <li> Join Telegram chat</li> <li> Join Discord community</li> </ul>"},{"location":"about/#report","title":"Report","text":"<p>To report a bug or request a feature, please: </p> <ul> <li>\ud83d\udc1e Open an Issue</li> </ul>"},{"location":"about/#contribute","title":"Contribute","text":"<p>Join us in improving translating, enhancing documentation, or coding new features. </p> <ul> <li>\ud83d\udcbb Project Repository</li> </ul>"},{"location":"about/#support","title":"Support","text":"<p>Support this project through one of the following ways: \ud83d\udc96</p> <ul> <li> GitHub</li> <li> PayPal</li> <li> Buy Me a Coffee</li> </ul>"},{"location":"about/#license","title":"License","text":"<p>XZG is licensed under GPL-3.0 License.   It's a strong copyleft license, meaning that any copy or modification of the original code must also be released under the GPL v3. In other words, you can take the GPL 3\u2019d code, add to it or make major changes, then distribute your version. However, your version is subject to the same license requirements, meaning that it must be under GPL v3  as well \u2014 anyone can see your modified code and install it for their own purposes.</p>"},{"location":"faq/","title":"FAQ","text":"Is the XZG compatible with Home Assistant without requiring additional setup? <p>Indeed, it does. Simply connect the XZG flashed device to your LAN Ethernet or USB, and you're all set. The XZG enabled device comes pre-flashed and prepared for immediate use. </p> Is it possible to configure more than one XZG firmware enabled coordinator with a single instance of Home Assistant? <p>Certainly, that's possible. You have the ability to establish numerous XZG enabled coordinators alongside a single Home Assistant setup. To achieve this, all you need to do is execute distinct instances of Zigbee2MQTT for each coordinator. According to user reports, approximately 6-8 LAN devices have been successfully employed in conjunction with a single Home Assistant setup. Furthermore, it's worth nothing that you have the capability to link with devices situated beyond your LAN network, such as those located in different geographical locations with internet access.</p> Is it possible to remotely update the firmware of the XZG enabled device without needing physical access to the device? <p>Certainly, you have the capability to do so. The two main chips employed in the coordinator (CC2652P and ESP32) can both be updated remotely from a different location. This feature makes the device well-suited for installation in infrequently accessed or remote locations.</p>"},{"location":"features/","title":"Features","text":"<p>XZG Firmware unifies the best innovations from previous Zigbee gateway projects into a single, comprehensive solution.</p> <p>By focusing the community's efforts on enhancing one product, XZG aims to streamline development, thereby improving the features and efficiency of your Zigbee Gateways. \ud83c\udf0d</p>"},{"location":"features/#key-features","title":"\ud83c\udf53 Key features","text":"Localized Translation \ud83c\uddec\ud83c\udde7 \ud83c\uddfa\ud83c\udde6 \ud83c\udde8\ud83c\uddf3 \ud83c\uddea\ud83c\uddf8 \ud83c\uddf5\ud83c\uddf9 \ud83c\uddf7\ud83c\uddfa \ud83c\uddeb\ud83c\uddf7 \ud83c\udde9\ud83c\uddea \ud83c\uddef\ud83c\uddf5 \ud83c\uddf9\ud83c\uddf7 \ud83c\uddee\ud83c\uddf9 \ud83c\uddf5\ud83c\uddf1 \ud83c\udde8\ud83c\uddff Zigbee OTA Install new Zigbee firmware or change role Coordinator / Router / OpenThread using only the Web UI of your gateway \ud83d\ude80 NVRAM Erase NVRAM using only the Web UI of your gateway \ud83c\udf89 Web UI theme \ud83c\udf1e Light or Dark \ud83c\udf11 Zigbee mode  Network or USB    on ANY device Network mode  RJ45 and Wi-Fi  (simultaneously) VPN support  WireGuard MQTT client  Publish gateway states to brokers and subscribes for commands Access point  If there isn't available any wire and wireless connection NTP client  Yes Custom DNS servers  Yes (when DHCP is off), Ethernet and WiFi Realtime web updates   Without page refreshing Button    Change current modes, factory reset  LEDs  Different blinks helps to indicate current mode Disable LEDs modes    Full disable and Night     Code XZG is developed, coded and tested in Ukraine \ud83c\uddfa\ud83c\udde6 Build  All builds are published using GitHub Actions. No more manual publishing of binaries."},{"location":"features/#supported-devices","title":"\ud83c\udfae Supported devices","text":"Device Name Button ESP32 LEDs Remote Network / USB mode selection Ethernet SLS-classic YLZGB-GW SLZB-06 ZigStar LAN LilyZig Olizig China-GW TubesZB-eth TubesZB-eth_usb TubesZB-poe TubesZB-poe-2022 TubesZB-poe-2023 CZC-1.0 HG POE Plus <ul> <li>Some devices do not support all features</li> </ul> <p>Custom device support</p> <p>You can add any custom device by editing <code>configHw.json</code> in Tools/Debug/File browser after installing XZG firmware.</p> <p>Please share your configuration with our community after testing. The most popular devices will be added. \ud83d\ude80</p>"},{"location":"hardware/","title":"Device Operation Guide","text":"<p>Check your device</p> <p>Not all devices with this firmware support LEDs and a button. These features are only available on devices that have them physically present. If your device does not support these features, the corresponding options will not appear in the web interface.</p>"},{"location":"hardware/#led-indicators","title":"LED Indicators","text":"<p>There are three LEDs on the device: Power, Mode, and Zigbee. Each LED behaves differently depending on the device's state and configuration.</p>"},{"location":"hardware/#power-led","title":"Power LED","text":"<ul> <li> <p>Blinks at 1 Hz (1): Indicates no TCP connection in network mode.</p> <ol> <li> 1 Hz means the LED blinks once per second.</li> </ol> </li> <li> <p>Constantly on: Signifies an active TCP connection with the Zigbee chip in network mode.</p> </li> </ul>"},{"location":"hardware/#mode-led","title":"Mode LED","text":"<ul> <li> <p>Blinks at 1 Hz (1): Active during the Zigbee chip connection check at bridge startup.</p> <ol> <li> 1 Hz means the LED blinks once per second.</li> </ol> </li> <li> <p>Constantly on: Indicates USB mode is active.</p> </li> <li>Off: Indicates network mode is active.</li> <li> <p>Blinks at 3 Hz (1): Signals a communication error with the Zigbee chip.</p> <ol> <li> 3 Hz means the LED blinks three times per second.</li> </ol> </li> </ul>"},{"location":"hardware/#zigbee-led","title":"Zigbee LED","text":"<ul> <li>Controlled by the Zigbee software: The state can be toggled from the Tools menu.</li> </ul>"},{"location":"hardware/#led-control-options","title":"LED Control Options","text":"<p>Through the General menu, you can:</p> <ul> <li>Disable either LED: Completely deactivates the selected LED.</li> <li>Enable Night Mode: Specify start and end times to completely turn off the LEDs during these periods.</li> </ul>"},{"location":"hardware/#button-operations","title":"Button Operations","text":"<p>The device button supports multiple types of presses to manage various functions:</p>"},{"location":"hardware/#factory-reset","title":"Factory Reset","text":"<p>To perform a factory reset:</p> <ol> <li>Power off the device.</li> <li>Hold down the button.</li> <li>Power on the device.</li> <li> <p>Release the button when both the Power and Mode LEDs start flashing at 3 Hz(1).</p> <ol> <li> 3 Hz means the LED blinks three times per second.</li> </ol> </li> </ol> <p>Factory Reset</p> <p>Performing a factory reset will erase all your settings and restore the device to its original factory state.</p>"},{"location":"hardware/#types-of-button-presses","title":"Types of Button Presses","text":"<ol> <li> <p>Short Press (under 3 seconds):</p> <ul> <li>Deactivates the LEDs temporarily (this setting resets upon reboot).</li> </ul> </li> <li> <p>Long Press (over 3 seconds but under 5 seconds):</p> <ul> <li>Switches between network and USB mode.</li> <li> <p>The Mode LED will start blinking at 1 Hz (1) to indicate that you can release the button.</p> <ol> <li> 1 Hz means the LED blinks once per second.</li> </ol> </li> </ul> </li> <li> <p>Extended Press (over 5 seconds):</p> <ul> <li>Activates BSL mode on the Zigbee chip.</li> <li> <p>The Mode LED will start blinking at 3 Hz (1) to indicate that you can release the button.</p> <ol> <li> 3 Hz means the LED blinks three times per second.</li> </ol> </li> </ul> </li> </ol> <p>Note</p> <p>This functionality is particularly useful in USB mode with the network disabled.</p>"},{"location":"http_api/","title":"HTTP API","text":"<p>TO DO - WRITE DESCRIPTION</p> <p>http://xzg.local/api?action=X</p> action ID Description 0 API_GET_PAGE 1 API_GET_PARAM 2 API_STARTWIFISCAN 3 API_WIFISCANSTATUS 4 API_GET_FILELIST 5 API_GET_FILE 6 API_SEND_HEX 7 API_WIFICONNECTSTAT 8 API_CMD 9 API_GET_LOG 10 API_DEL_FILE 11 API_FLASH_ZB <p>http://xzg.local/api?action=1&amp;param=X</p> param Description refreshLogs Refresh interval zbFwVer Zigbee firmware version zbHwVer Zigbee hardware revision espVer ESP32 firmware version wifiEnable WiFi enabled status coordMode Working mode (Network (0) or USB (1)) all All gateway configuration params in JSON object vars All gateway variables in JSON object update_root Realtime updating values root Values to update on root page load <p>http://xzg.local/api?action=8&amp;cmd=X</p> cmd ID Description 0 CMD_ZB_ROUTER_RECON 1 CMD_ZB_RST 2 CMD_ZB_BSL 3 CMD_ESP_RES 4 CMD_ADAP_LAN 5 CMD_ADAP_USB 6 CMD_LED_ACT 7 CMD_ZB_FLASH 8 CMD_CLEAR_LOG 9 CMD_ESP_UPD_URL 10 CMD_ZB_CHK_FW 11 CMD_ZB_CHK_HW 12 CMD_ZB_LED_TOG 13 CMD_ESP_FAC_RES 14 CMD_ZB_ERASE_NVRAM <p>D!</p> <p>http://xzg.local/api?action=5&amp;filename=configHw.json</p> <p>Pages</p> <p><code>http://xzg.local/api?action=0&amp;page=X</code></p> <pre><code>| page ID | Name              |\n| ------- | ----------------- |\n| 0       | root              |\n| 1       | General settings  |\n| 2       | Network settings  |\n| 3       | API_PAGE_NETWORK  |\n| 4       | API_PAGE_ZIGBEE   |\n| 5       | API_PAGE_SECURITY |\n| 6       | API_PAGE_TOOLS    |\n| 7       | API_PAGE_ABOUT    |\n| 8       | API_PAGE_MQTT     |\n| 9       | API_PAGE_VPN      |\n</code></pre>"},{"location":"install/","title":"XZG - Web Flasher","text":""},{"location":"install/#xzg-web-flasher","title":"XZG - Web Flasher","text":"<p>Flash or Find your device using next options:</p> <ol> <li>Plug in your gateway to a USB port.</li> <li>Hit \"Install\" and select the correct COM port. No device found?</li> <li>Get XZG firmware installed and connected in less than 3 minutes!</li> </ol> INSTALL Use Chrome Desktop Not allowed to use this on HTTP! Open XZG web UI via local network <p>Powered by ESP Web Tools</p>"},{"location":"lifehacks/","title":"Lifehacks","text":""},{"location":"lifehacks/#good-to-know","title":"Good to know","text":""},{"location":"lifehacks/#best-channel-for-a-zigbee-network","title":"Best channel for a Zigbee network","text":"<p>According to this article by Metageek the best is to use channel 15 for Zigbee and channels 1,6 and 11 for your home WiFi networks.</p> <p></p> <p>The rule - make the networks as less overlaps as possible. Have a look on other interesting topics at those web-resource, some of them are listed below:</p> <ul> <li>ZigBee and Wi-Fi Coexistence;</li> <li>Choosing a WiFi Channel;</li> <li>Why Channels 1, 6, and 11? (video);</li> </ul>"},{"location":"lifehacks/#mdns-autodiscovery","title":"mDNS Autodiscovery","text":"<ul> <li>if you do not know your XZG adapter's IP address, you can reach web-interface by following to <code>xzg.local</code> in your browser.</li> <li> <p>if you do not know your XZG adapter's IP address, you can set-up you Zigbee2MQTT autodiscovery by setting these parameters:</p> <pre><code>serial:\n  port: mdns://xzg\n</code></pre> </li> </ul>"},{"location":"lifehacks/#common-errors","title":"Common errors","text":""},{"location":"lifehacks/#zigbee2mqtt-error-network-commissioning-timeout-panid-or-extendedpanid-already-exists-nearby","title":"Zigbee2MQTT: Error Network Commissioning Timeout (panID or extendedPanID already exists nearby)","text":"<p>This error is discussed in these two threads: first and second. According to the first thread, the most possible issue cause this error is: <code>zigbee2mqtt will always use the same, default extendedPanId unless you set it to something else in the config file</code> <pre><code>advanced:\n  pan_id: GENERATE\n  ext_pan_id: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]\n  network_key: GENERATE\n</code></pre> According to the second thread, the users propose to start without antennas or routers nearby: <code>Try unscrewing the antenna during startup. Or unplug any near by routers temporarily.</code> Try to do above mentioned as well as start ZHA just to test your device:</p> <ol> <li>Go to Home Assistant</li> <li>Click <code>Settings</code></li> <li>Go to <code>Devices &amp; Services</code></li> <li>Click <code>Add integration</code> (right bottom corner)</li> <li>Find \u00abZigbee Home Automation\u00bb, click on it;</li> <li>Between two options \u00abAdd Zigbee device\u00bb and \u00abZigbee Home Automation\u00bb choose <code>Zigbee Home Automation</code>;</li> <li>Select serial port window - <code>Enter manually</code></li> <li>Radio type window - <code>ZNP = Texas Instruments Z-Stack ZNP \u2026</code></li> <li> <p>Serial port settings window:</p> <ul> <li>Serial device path: \u00ab socket://192.168.1.105:6638 \u00bb, where 192.168.1.105 is IP address of your XZG;</li> <li>port speed left by default 115200;</li> <li>data flow control undefined (it does not matter for LAN adapters)</li> </ul> </li> <li> <p>Press <code>Submit</code>.</p> </li> <li>Network formation window - <code>Erase network settings and form a new network</code></li> <li>Wait for Zigbee network and try to add some Zigbee end-device (e.g. sensor etc)</li> </ol> <p>If ZHA starts - means that the problem in communication between Zigbee2MQTT and Z-Stack firmware, flashed to the adapter. To solve it - try steps above ZHA part.</p> <p>Note</p> <p>More to come</p>"},{"location":"mqtt/","title":"MQTT description","text":""},{"location":"mqtt/#topics","title":"Topics","text":"<p>XZG-XXXX/avty</p> <p>Contains the current state of the gateway connection to the MQTT broker. When a connection is established, the payload online is published.</p> <p>Using the Last Will and Testament (LWT) mechanism, if the connection is broken, the MQTT broker will publish offline payload within 30 seconds.</p> <p>XZG-XXXX/state</p> <p>Contains information about the gateway. Publish every N seconds. It is set in the MQTT setting - \"Update interval\". Payload example:</p> <pre><code>{\n    \"uptime\":\"0 d 00:01:08\",\n    \"wlanIp\":\"::\",\n    \"wlanRssi\":\"0\",\n    \"lanIp\":\"192.168.178.90\",\n    \"temperature\":\"41.89\",\n    \"hostname\":\"XZG\",\n    \"connections\":\"1\",\n    \"mode\":\"Zigbee-to-Network\",\n    \"zbfw\":\"20240316\"\n}\n</code></pre> <p>XZG-XXXX/cmd</p> <p>Publishing messages to this topic allows you to control your gateway via MQTT. Possible commands: {cmd:\"rst_zig\"} - restart Zigbee module {cmd:\"rst_esp\"} - restart ESP32 {cmd:\"enbl_bsl\"} - enable BSL in Zigbee module</p> <p>XZG-XXXX/io/rst_zig, rst_esp, enbl_bsl</p> <p>Status topics contain the current state of various operating modes of the gateway. Possible states: ON or OFF</p> <p>XZG-XXXX/io/socket</p> <p>Possible states: ON or OFF</p> <p>XZG-XXXX/io/update_esp</p> <p>Possible states: ON or OFF</p>"},{"location":"mqtt/#auto-discovery","title":"Auto Discovery","text":"<p>There is also a MQTT AutoDiscovery function. The following entities are available:</p> <p>Buttons</p> <pre><code>homeassistant/button/XZG-XXXX/rst_esp\nhomeassistant/button/XZG-XXXX/rst_zig\nhomeassistant/button/XZG-XXXX/enbl_bsl\n</code></pre> <p>Binary sensors</p> <pre><code>homeassistant/binary_sensor/XZG-XXXX/socket\nhomeassistant/binary_sensor/XZG-XXXX/update_esp\n</code></pre> <p>Sensors</p> <pre><code>homeassistant/sensor/XZG-XXXX/uptime\nhomeassistant/sensor/XZG-XXXX/wlanIp\nhomeassistant/sensor/XZG-XXXX/wlanSsid\nhomeassistant/sensor/XZG-XXXX/wlanRssi\nhomeassistant/sensor/XZG-XXXX/lanIp\nhomeassistant/sensor/XZG-XXXX/temperature\nhomeassistant/sensor/XZG-XXXX/hostname\nhomeassistant/sensor/XZG-XXXX/connections\nhomeassistant/sensor/XZG-XXXX/mode\nhomeassistant/sensor/XZG-XXXX/zbfw\nhomeassistant/sensor/XZG-XXXX/zbhw\n</code></pre> <p>In the Home Assistant, in the device information section, the board model and software version will also be available.</p>"},{"location":"quick-start/","title":"Getting started","text":"<p>XZG Firmware unifies the best innovations from previous Zigbee gateway projects into a single, comprehensive solution.</p> <p>By focusing the community's efforts on enhancing one product, XZG aims to streamline development, thereby improving the capabilities and efficiency of your Zigbee Gateways. \ud83c\udf0d</p> <p>Begin</p> <p>Now you can start from Guide</p> <p>To-do</p> <p>Write Wiki</p>"}]}