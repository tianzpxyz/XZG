name: Build, release, push firmware

permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  build_release_push:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Get Release tag
        id: get_tag
        shell: bash
        run: |
          value=${GITHUB_REF#refs/tags/}
          echo "tag=$value" >> $GITHUB_OUTPUT

      - name: Display src/version.h before update
        run: cat src/version.h

      - name: Update version in source code
        run: |
          sed -i 's/#define VERSION.*/#define VERSION "${{ steps.get_tag.outputs.tag }}"/' src/version.h

      - name: Display src/version.h after update
        run: cat src/version.h

      - name: Install Node JS
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install PlatformIO Core
        run: pip install --upgrade platformio==6.1.11

      - name: Build PlatformIO Project
        run: pio run

      - name: Get last commit message
        id: get_commit_message
        run: |
          currentTag=${{ steps.get_tag.outputs.tag }}
          badgeText="![GitHub Downloads](https://img.shields.io/github/downloads/xyzroe/XZG/${currentTag}/total)"
          printf -v badgeTextWithNewlines "%s\n\n" "$badgeText" 
          commitMessage=$(git log -1 --pretty=%B | tail -n +2)
          fullCommitMessage="${badgeTextWithNewlines}${commitMessage}"
          echo "releaseMessage<<EOF" >> $GITHUB_ENV
          printf "%s\n" "$fullCommitMessage" >> $GITHUB_ENV 
          echo "EOF" >> $GITHUB_ENV
          echo "commitMessage<<EOF" >> $GITHUB_ENV
          printf "%s\n" "$commitMessage" >> $GITHUB_ENV 
          echo "EOF" >> $GITHUB_ENV
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Create manifest.json for ESP Web Tools
        run: |
          cat << EOF > manifest.json
          {
            "name": "XZG Firmware",
            "version": "${{ steps.get_tag.outputs.tag }}",
            "builds": [
              {
                "chipFamily": "ESP32",
                "improv": false,
                "parts": [
                  {
                    "path": "https://raw.githubusercontent.com/${{ github.repository }}/releases/${{ steps.get_tag.outputs.tag }}/XZG_${{ steps.get_tag.outputs.tag }}.full.bin",
                    "offset": 0
                  }
                ]
              }
            ]
          }
          EOF
          echo "Manifest file created."

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: false
          name: "${{ steps.get_tag.outputs.tag }}"
          body: ${{ env.releaseMessage }}
          files: |
            bin/XZG_${{ steps.get_tag.outputs.tag }}.ota.bin
            bin/XZG_${{ steps.get_tag.outputs.tag }}.full.bin

      - name: Checkout releases branch
        uses: actions/checkout@v3
        with:
          ref: releases
          path: releases

      - name: Copy files to releases directory
        run: |
          mkdir -p releases/${{ steps.get_tag.outputs.tag }}
          cp ./bin/XZG_${{ steps.get_tag.outputs.tag }}.full.bin releases/${{ steps.get_tag.outputs.tag }}/
          cp manifest.json releases/${{ steps.get_tag.outputs.tag }}/
          echo "Files copied to releases directory."

      - name: Commit and push files to releases branch
        run: |
          cd releases
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "Add firmware and manifest for version ${{ steps.get_tag.outputs.tag }}"
            git push origin releases
          else
            echo "No changes to commit"
          fi

      - name: Send Telegram Notification about release
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            ${{ env.commitMessage }}

            [${{ steps.get_tag.outputs.tag }}](https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_tag.outputs.tag }})

      - name: Send Discord Notification about release
        run: |
          json_payload=$(jq -n --arg content "https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_tag.outputs.tag }}" '{content: $content}')
          curl -H "Content-Type: application/json" \
               -d "$json_payload" \
               ${{ secrets.DISCORD_WEBHOOK }}